// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package database

import (
	"context"
	"sync"
)

// Ensure, that StorageMock does implement Storage.
// If this is not the case, regenerate this file with moq.
var _ Storage = &StorageMock{}

// StorageMock is a mock implementation of Storage.
//
// 	func TestSomethingThatUsesStorage(t *testing.T) {
//
// 		// make and configure a mocked Storage
// 		mockedStorage := &StorageMock{
// 			CloseFunc: func()  {
// 				panic("mock out the Close method")
// 			},
// 			CreateFunc: func(ctx context.Context, id string, value any) error {
// 				panic("mock out the Create method")
// 			},
// 			ExistsFunc: func(ctx context.Context, id string) bool {
// 				panic("mock out the Exists method")
// 			},
// 			InitializeFunc: func(ctx context.Context) error {
// 				panic("mock out the Initialize method")
// 			},
// 			SelectFunc: func(ctx context.Context, id string) (any, error) {
// 				panic("mock out the Select method")
// 			},
// 			UpdateFunc: func(ctx context.Context, id string, value any) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedStorage in code that requires Storage
// 		// and then make assertions.
//
// 	}
type StorageMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func()

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, id string, value any) error

	// ExistsFunc mocks the Exists method.
	ExistsFunc func(ctx context.Context, id string) bool

	// InitializeFunc mocks the Initialize method.
	InitializeFunc func(ctx context.Context) error

	// SelectFunc mocks the Select method.
	SelectFunc func(ctx context.Context, id string) (any, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, id string, value any) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Value is the value argument value.
			Value any
		}
		// Exists holds details about calls to the Exists method.
		Exists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Initialize holds details about calls to the Initialize method.
		Initialize []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Select holds details about calls to the Select method.
		Select []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Value is the value argument value.
			Value any
		}
	}
	lockClose      sync.RWMutex
	lockCreate     sync.RWMutex
	lockExists     sync.RWMutex
	lockInitialize sync.RWMutex
	lockSelect     sync.RWMutex
	lockUpdate     sync.RWMutex
}

// Close calls CloseFunc.
func (mock *StorageMock) Close() {
	if mock.CloseFunc == nil {
		panic("StorageMock.CloseFunc: method is nil but Storage.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedStorage.CloseCalls())
func (mock *StorageMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *StorageMock) Create(ctx context.Context, id string, value any) error {
	if mock.CreateFunc == nil {
		panic("StorageMock.CreateFunc: method is nil but Storage.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    string
		Value any
	}{
		Ctx:   ctx,
		ID:    id,
		Value: value,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, id, value)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedStorage.CreateCalls())
func (mock *StorageMock) CreateCalls() []struct {
	Ctx   context.Context
	ID    string
	Value any
} {
	var calls []struct {
		Ctx   context.Context
		ID    string
		Value any
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Exists calls ExistsFunc.
func (mock *StorageMock) Exists(ctx context.Context, id string) bool {
	if mock.ExistsFunc == nil {
		panic("StorageMock.ExistsFunc: method is nil but Storage.Exists was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockExists.Lock()
	mock.calls.Exists = append(mock.calls.Exists, callInfo)
	mock.lockExists.Unlock()
	return mock.ExistsFunc(ctx, id)
}

// ExistsCalls gets all the calls that were made to Exists.
// Check the length with:
//     len(mockedStorage.ExistsCalls())
func (mock *StorageMock) ExistsCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockExists.RLock()
	calls = mock.calls.Exists
	mock.lockExists.RUnlock()
	return calls
}

// Initialize calls InitializeFunc.
func (mock *StorageMock) Initialize(ctx context.Context) error {
	if mock.InitializeFunc == nil {
		panic("StorageMock.InitializeFunc: method is nil but Storage.Initialize was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockInitialize.Lock()
	mock.calls.Initialize = append(mock.calls.Initialize, callInfo)
	mock.lockInitialize.Unlock()
	return mock.InitializeFunc(ctx)
}

// InitializeCalls gets all the calls that were made to Initialize.
// Check the length with:
//     len(mockedStorage.InitializeCalls())
func (mock *StorageMock) InitializeCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockInitialize.RLock()
	calls = mock.calls.Initialize
	mock.lockInitialize.RUnlock()
	return calls
}

// Select calls SelectFunc.
func (mock *StorageMock) Select(ctx context.Context, id string) (any, error) {
	if mock.SelectFunc == nil {
		panic("StorageMock.SelectFunc: method is nil but Storage.Select was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockSelect.Lock()
	mock.calls.Select = append(mock.calls.Select, callInfo)
	mock.lockSelect.Unlock()
	return mock.SelectFunc(ctx, id)
}

// SelectCalls gets all the calls that were made to Select.
// Check the length with:
//     len(mockedStorage.SelectCalls())
func (mock *StorageMock) SelectCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockSelect.RLock()
	calls = mock.calls.Select
	mock.lockSelect.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *StorageMock) Update(ctx context.Context, id string, value any) error {
	if mock.UpdateFunc == nil {
		panic("StorageMock.UpdateFunc: method is nil but Storage.Update was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    string
		Value any
	}{
		Ctx:   ctx,
		ID:    id,
		Value: value,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, id, value)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedStorage.UpdateCalls())
func (mock *StorageMock) UpdateCalls() []struct {
	Ctx   context.Context
	ID    string
	Value any
} {
	var calls []struct {
		Ctx   context.Context
		ID    string
		Value any
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
