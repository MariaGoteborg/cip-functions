// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package functions

import (
	"context"
	"sync"
)

// Ensure, that RegistryMock does implement Registry.
// If this is not the case, regenerate this file with moq.
var _ Registry = &RegistryMock{}

// RegistryMock is a mock implementation of Registry.
//
// 	func TestSomethingThatUsesRegistry(t *testing.T) {
//
// 		// make and configure a mocked Registry
// 		mockedRegistry := &RegistryMock{
// 			FindFunc: func(ctx context.Context, matchers ...RegistryMatcherFunc) ([]RegistryItem, error) {
// 				panic("mock out the Find method")
// 			},
// 		}
//
// 		// use mockedRegistry in code that requires Registry
// 		// and then make assertions.
//
// 	}
type RegistryMock struct {
	// FindFunc mocks the Find method.
	FindFunc func(ctx context.Context, matchers ...RegistryMatcherFunc) ([]RegistryItem, error)

	// calls tracks calls to the methods.
	calls struct {
		// Find holds details about calls to the Find method.
		Find []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Matchers is the matchers argument value.
			Matchers []RegistryMatcherFunc
		}
	}
	lockFind sync.RWMutex
}

// Find calls FindFunc.
func (mock *RegistryMock) Find(ctx context.Context, matchers ...RegistryMatcherFunc) ([]RegistryItem, error) {
	if mock.FindFunc == nil {
		panic("RegistryMock.FindFunc: method is nil but Registry.Find was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Matchers []RegistryMatcherFunc
	}{
		Ctx:      ctx,
		Matchers: matchers,
	}
	mock.lockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	mock.lockFind.Unlock()
	return mock.FindFunc(ctx, matchers...)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//     len(mockedRegistry.FindCalls())
func (mock *RegistryMock) FindCalls() []struct {
	Ctx      context.Context
	Matchers []RegistryMatcherFunc
} {
	var calls []struct {
		Ctx      context.Context
		Matchers []RegistryMatcherFunc
	}
	mock.lockFind.RLock()
	calls = mock.calls.Find
	mock.lockFind.RUnlock()
	return calls
}
